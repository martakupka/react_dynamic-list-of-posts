{"version":3,"sources":["api/api.js","api/posts.js","components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","api/comments.js","App.jsx","index.js"],"names":["BASE_URL","getUserPosts","userId","fetch","then","response","json","posts","data","filter","post","PostsList","getSelectedPostId","postId","useState","setPosts","useEffect","Number","postsFromServer","className","map","key","id","title","type","onClick","NewCommentForm","getNewComment","name","email","body","newComment","setNewComment","handleChange","event","target","value","onSubmit","preventDefault","placeholder","onChange","PostDetails","comments","setComments","areCommentsVisible","setCommentsVisible","loadComments","comment","commentsFromServer","length","commentId","method","headers","JSON","stringify","addPostComment","App","selectedUserId","setSelectedUserId","selectedPostId","setSelectedPostId","postDetails","setPostDetails","getPostDetails","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6f0c6edb.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import { BASE_URL } from './api';\n\nexport const getUserPosts = userId => (\n  fetch(`${BASE_URL}/posts`)\n    .then(response => response.json())\n    .then(posts => (userId !== 0\n      ? posts.data.filter(post => post.userId === userId)\n      : posts.data))\n);\n\nexport const getPostDetails = postId => (\n  fetch(`${BASE_URL}/posts/${postId}`)\n    .then(response => response.json())\n    .then(post => post.data)\n);\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\n\nimport { getUserPosts } from '../../api/posts';\n\nexport const PostsList = ({ userId, getSelectedPostId, postId }) => {\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    getUserPosts(Number(userId))\n      .then(postsFromServer => (\n        setPosts(postsFromServer)\n      ));\n  }, []);\n\n  useEffect(() => {\n    getUserPosts(Number(userId)).then(postsFromServer => (\n      setPosts(postsFromServer)\n    ));\n  }, [userId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n            {postId === post.id\n              ? (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button button--selected\"\n                  onClick={() => {\n                    getSelectedPostId(0);\n                  }}\n                >\n                  Close\n                </button>\n              ) : (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => {\n                    getSelectedPostId(post.id);\n                  }}\n                >\n                  Open\n                </button>\n              )\n            }\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  userId: PropTypes.string.isRequired,\n  getSelectedPostId: PropTypes.func.isRequired,\n  postId: PropTypes.number.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ getNewComment }) => {\n  const [newComment, setNewComment] = useState({\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setNewComment({\n      ...newComment,\n      [name]: value,\n    });\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    getNewComment(newComment);\n    setNewComment({\n      name: '',\n      email: '',\n      body: '',\n    });\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={newComment.name}\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={newComment.email}\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={newComment.body}\n          onChange={handleChange}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  getNewComment: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport {\n  getPostComments,\n  deletePostComment,\n  addPostComment,\n} from '../../api/comments';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ post }) => {\n  const [comments, setComments] = useState([]);\n  const [areCommentsVisible, setCommentsVisible] = useState(true);\n\n  const loadComments = () => {\n    getPostComments(post.id)\n      .then(commentsFromServer => setComments(commentsFromServer));\n  };\n\n  useEffect(() => {\n    loadComments();\n  }, [post.id]);\n\n  const getNewComment = (newComment) => {\n    addPostComment(newComment, post.id)\n      .then(loadComments);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => {\n            if (comments.length > 0) {\n              setCommentsVisible(!areCommentsVisible);\n            }\n          }}\n        >\n          {areCommentsVisible\n            ? `Hide ${comments.length} comments`\n            : `Show ${comments.length} comments`\n          }\n        </button>\n\n        { !areCommentsVisible ? null\n          : (\n            <ul className=\"PostDetails__list\">\n              { comments.map(comment => (\n                <li className=\"PostDetails__list-item\">\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => {\n                      deletePostComment(comment.id)\n                        .then(loadComments);\n                    }}\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))\n              }\n            </ul>\n          )\n        }\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm getNewComment={getNewComment} />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n    createdAt: PropTypes.string.isRequired,\n    updatedAt: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import { BASE_URL } from './api';\n\nexport const getPostComments = postId => (\n  fetch(`${BASE_URL}/comments`)\n    .then(response => response.json())\n    .then(comments => comments.data\n      .filter(comment => comment.postId === postId))\n);\n\nexport const deletePostComment = commentId => (\n  fetch(`${BASE_URL}/comments/${commentId}`, { method: 'DELETE' })\n);\n\nexport const addPostComment = (newComment, postId) => (\n  fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({\n      postId,\n      ...newComment,\n    }),\n  })\n);\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getPostDetails } from './api/posts';\n\nconst App = () => {\n  const [selectedUserId, setSelectedUserId] = useState('0');\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [postDetails, setPostDetails] = useState(null);\n\n  const getSelectedPostId = (postId) => {\n    getPostDetails(postId)\n      .then(post => setPostDetails(post));\n\n    setSelectedPostId(postId);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={event => setSelectedUserId(event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            userId={selectedUserId}\n            getSelectedPostId={getSelectedPostId}\n            postId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {\n            postDetails ? (\n              <PostDetails post={postDetails} />\n            )\n              : (\n                <p>No post selected</p>\n              )\n          }\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}